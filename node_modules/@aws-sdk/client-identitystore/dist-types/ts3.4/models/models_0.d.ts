import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { IdentitystoreServiceException as __BaseException } from "./IdentitystoreServiceException";

export declare class AccessDeniedException extends __BaseException {
    readonly name: "AccessDeniedException";
    readonly $fault: "client";
    Message?: string;
    
    RequestId?: string;
    
    constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
}
export interface DescribeGroupRequest {
    
    IdentityStoreId: string | undefined;
    
    GroupId: string | undefined;
}
export declare namespace DescribeGroupRequest {
    
    const filterSensitiveLog: (obj: DescribeGroupRequest) => any;
}
export interface DescribeGroupResponse {
    
    GroupId: string | undefined;
    
    DisplayName: string | undefined;
}
export declare namespace DescribeGroupResponse {
    
    const filterSensitiveLog: (obj: DescribeGroupResponse) => any;
}

export declare class InternalServerException extends __BaseException {
    readonly name: "InternalServerException";
    readonly $fault: "server";
    Message?: string;
    
    RequestId?: string;
    
    constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
}
export declare enum ResourceType {
    GROUP = "GROUP",
    IDENTITY_STORE = "IDENTITY_STORE",
    USER = "USER"
}

export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    
    ResourceType?: ResourceType | string;
    
    ResourceId?: string;
    Message?: string;
    
    RequestId?: string;
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}

export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    Message?: string;
    
    RequestId?: string;
    
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}

export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    Message?: string;
    
    RequestId?: string;
    
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
export interface DescribeUserRequest {
    
    IdentityStoreId: string | undefined;
    
    UserId: string | undefined;
}
export declare namespace DescribeUserRequest {
    
    const filterSensitiveLog: (obj: DescribeUserRequest) => any;
}
export interface DescribeUserResponse {
    
    UserName: string | undefined;
    
    UserId: string | undefined;
}
export declare namespace DescribeUserResponse {
    
    const filterSensitiveLog: (obj: DescribeUserResponse) => any;
}

export interface Filter {
    
    AttributePath: string | undefined;
    
    AttributeValue: string | undefined;
}
export declare namespace Filter {
    
    const filterSensitiveLog: (obj: Filter) => any;
}
export interface ListGroupsRequest {
    
    IdentityStoreId: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
    
    Filters?: Filter[];
}
export declare namespace ListGroupsRequest {
    
    const filterSensitiveLog: (obj: ListGroupsRequest) => any;
}

export interface Group {
    
    GroupId: string | undefined;
    
    DisplayName: string | undefined;
}
export declare namespace Group {
    
    const filterSensitiveLog: (obj: Group) => any;
}
export interface ListGroupsResponse {
    
    Groups: Group[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListGroupsResponse {
    
    const filterSensitiveLog: (obj: ListGroupsResponse) => any;
}
export interface ListUsersRequest {
    
    IdentityStoreId: string | undefined;
    
    MaxResults?: number;
    
    NextToken?: string;
    
    Filters?: Filter[];
}
export declare namespace ListUsersRequest {
    
    const filterSensitiveLog: (obj: ListUsersRequest) => any;
}

export interface User {
    
    UserName: string | undefined;
    
    UserId: string | undefined;
}
export declare namespace User {
    
    const filterSensitiveLog: (obj: User) => any;
}
export interface ListUsersResponse {
    
    Users: User[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListUsersResponse {
    
    const filterSensitiveLog: (obj: ListUsersResponse) => any;
}
